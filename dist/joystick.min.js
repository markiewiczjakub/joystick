var Joystick=function(t){var s={};function i(e){if(s[e])return s[e].exports;var n=s[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=s,i.d=function(t,s,e){i.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,s){if(1&s&&(t=i(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var n in t)i.d(e,n,function(s){return t[s]}.bind(null,n));return e},i.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(s,"a",s),s},i.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},i.p="",i(i.s=0)}([function(t,s,i){const e=i(1).default;t.exports=e},function(t,s,i){"use strict";i.r(s),i.d(s,"default",(function(){return h}));class e{static uuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var s=16*Math.random()|0;return("x"==t?s:3&s|8).toString(16)}))}static getCursorPosition(t){let s,i;return t instanceof MouseEvent?(s=t.pageX,i=t.pageY):t instanceof TouchEvent&&(s=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY),{x:s,y:i}}}e.width=100,e.height=100,e.color="#FF0000",e.strokeColor="#000000";class n{constructor(t,s){this.x=t,this.y=s,this.x=t||0,this.y=s||0}negative(){return this.x=-this.x,this.y=-this.y,this}add(t){return t instanceof n?(this.x+=t.x,this.y+=t.y):(this.x+=t,this.y+=t),this}subtract(t){return t instanceof n?(this.x-=t.x,this.y-=t.y):(this.x-=t,this.y-=t),this}multiply(t){return t instanceof n?(this.x*=t.x,this.y*=t.y):(this.x*=t,this.y*=t),this}divide(t){return t instanceof n?(0!=t.x&&(this.x/=t.x),0!=t.y&&(this.y/=t.y)):0!=t&&(this.x/=t,this.y/=t),this}equals(t){return this.x==t.x&&this.y==t.y}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}length(){return Math.sqrt(this.dot(this))}normalize(){return this.divide(this.length())}min(){return Math.min(this.x,this.y)}max(){return Math.max(this.x,this.y)}toAngles(){return-Math.atan2(-this.y,this.x)}angleTo(t){return Math.acos(this.dot(t)/(this.length()*t.length()))}toArray(t){return[this.x,this.y].slice(0,t||2)}clone(){return new n(this.x,this.y)}set(t,s){return this.x=t,this.y=s,this}}class o{constructor(t){this.joystick=t,this.canvas=document.createElement("canvas"),this.canvas.id=e.uuidv4(),this.canvas.width=e.width*this.joystick.options.scale,this.canvas.height=e.height*this.joystick.options.scale,this.canvasContext=this.canvas.getContext("2d"),this.joystick.domElement.appendChild(this.canvas),this.circleRadius={background:this.canvas.width/2-3*this.joystick.options.scale,joystick:this.canvas.width/2-20*this.joystick.options.scale,joystickStroke:this.canvas.width/2-21.5*this.joystick.options.scale},this.maxLength=this.canvas.width/2-this.circleRadius.joystick,this.joystickPoistion={x:this.canvas.width/2,y:this.canvas.height/2},this.bindEvents(),this.draw()}calculate(t,s){let i=new n(this.canvas.offsetLeft+this.canvas.width/2,this.canvas.offsetTop+this.canvas.height/2),e=new n(t,s).subtract(i);e.length()>this.maxLength&&(e.normalize(),e.multiply(this.maxLength)),this.joystickPoistion.x=e.x+this.canvas.width/2,this.joystickPoistion.y=e.y+this.canvas.width/2,e.divide(this.maxLength),this.joystick.update(e.x,e.y)}bindEvents(){const t=(t,s)=>{if(!1===s&&!0===this.joystick.draw&&this.joystick.dispatch("end",this.joystick),!1===s)return this.joystickPoistion.x=this.canvas.width/2,this.joystickPoistion.y=this.canvas.height/2,this.joystick.update(0,0),void(this.joystick.draw=s);this.joystick.draw=s,this.joystick.dispatch("start",this.joystick);const i=e.getCursorPosition(t);this.calculate(i.x,i.y)},s=t=>{if(!this.joystick.draw)return;const s=e.getCursorPosition(t);this.calculate(s.x,s.y)};this.canvas.addEventListener("mousedown",s=>t(s,!0)),document.addEventListener("mouseup",s=>t(s,!1)),document.addEventListener("mousemove",t=>s(t)),this.canvas.addEventListener("touchstart",s=>t(s,!0)),document.addEventListener("touchend",s=>t(s,!1)),document.addEventListener("touchmove",t=>s(t))}drawBackground(){this.canvasContext.beginPath(),this.canvasContext.lineWidth=3*this.joystick.options.scale,this.canvasContext.strokeStyle=this.joystick.options.color,this.canvasContext.arc(this.canvas.width/2,this.canvas.height/2,this.circleRadius.background,0,2*Math.PI),this.canvasContext.stroke()}drawJoystick(t,s){this.canvasContext.beginPath(),this.canvasContext.arc(t,s,this.circleRadius.joystick,0,2*Math.PI),this.canvasContext.fillStyle=this.joystick.options.color,this.canvasContext.fill(),this.canvasContext.beginPath(),this.canvasContext.arc(t,s,this.circleRadius.joystickStroke,0,2*Math.PI),this.canvasContext.strokeStyle=this.joystick.options.strokeColor,this.canvasContext.stroke()}draw(){this.canvasContext&&(this.canvasContext.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawBackground(),this.drawJoystick(this.joystickPoistion.x,this.joystickPoistion.y),this.joystick.draw&&window.requestAnimationFrame(()=>this.draw()))}}class a{constructor(t){this.eventName=t,this.callbacks=[]}registerCallback(t){this.callbacks.push(t)}unregisterCallback(t){const s=this.callbacks.indexOf(t);s>-1&&this.callbacks.splice(s,1)}fire(t){this.callbacks.slice(0).forEach(s=>{s(t)})}}class h extends class{constructor(){this.events={}}dispatch(t,s){const i=this.events[t];i&&i.fire(s)}on(t,s){let i=this.events[t];i||(i=new a(t),this.events[t]=i),i.registerCallback(s)}off(t,s){const i=this.events[t];i&&i.callbacks.indexOf(s)>-1&&(i.unregisterCallback(s),0===i.callbacks.length&&delete this.events[t])}}{constructor(t,s){super(),this.domElement=t,this.options=s,this._draw=!1,this.domElement=t||document.querySelector("#joystick"),this.domElement?(this.options=s||{},this.options.scale=this.options.scale||1,this.options.color=this.options.color||e.color,this.options.strokeColor=this.options.strokeColor||e.strokeColor,this.init()):console.error("ERROR: Could not find #joystick HTMLElement.")}get draw(){return this._draw}set draw(t){(t||this.draw)&&(this._draw=t,this.canvasHander.draw())}init(){this.canvasHander=new o(this)}update(t,s){this.dirVector=new n(t,s),this.dispatch("change",this)}directionVector(){return{x:this.dirVector.x,y:this.dirVector.y}}directionAngleRads(){return 0!==this.dirVector.length()&&this.dirVector.toAngles()}directionAngleDegs(){return!!this.directionAngleRads()&&180*this.directionAngleRads()/Math.PI}direction(){if(this.directionAngleRads()){const t=Math.round(this.directionAngleDegs())+450;return["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"][Math.floor(t/22.5+.5)%16]}return!1}displacementValue(){return this.dirVector.length()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,