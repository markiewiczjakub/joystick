var Joystick =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/CanvasHandler.ts":
/*!******************************!*\
  !*** ./src/CanvasHandler.ts ***!
  \******************************/
/*! exports provided: CanvasHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasHandler", function() { return CanvasHandler; });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");
/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector */ "./src/Vector.ts");


class CanvasHandler {
    constructor(joystick) {
        this.joystick = joystick;
        this.canvas = document.createElement("canvas");
        this.canvas.id = _Utils__WEBPACK_IMPORTED_MODULE_0__["Utils"].uuidv4();
        this.canvas.width = _Utils__WEBPACK_IMPORTED_MODULE_0__["Utils"].width * this.joystick.options.scale;
        this.canvas.height = _Utils__WEBPACK_IMPORTED_MODULE_0__["Utils"].height * this.joystick.options.scale;
        this.canvasContext = this.canvas.getContext("2d");
        this.joystick.domElement.appendChild(this.canvas);
        // max vector's length
        this.circleRadius = {
            background: this.canvas.width / 2 - (3 * this.joystick.options.scale),
            joystick: this.canvas.width / 2 - (20 * this.joystick.options.scale),
            joystickStroke: this.canvas.width / 2 - (21.5 * this.joystick.options.scale),
        };
        this.maxLength = this.canvas.width / 2 - this.circleRadius.joystick;
        this.joystickPoistion = {
            x: this.canvas.width / 2,
            y: this.canvas.height / 2
        };
        this.bindEvents();
        this.draw();
    }
    calculate(x, y) {
        let joystickVector = new _Vector__WEBPACK_IMPORTED_MODULE_1__["Vector"](this.canvas.offsetLeft + this.canvas.width / 2, this.canvas.offsetTop + this.canvas.height / 2);
        let clickVector = new _Vector__WEBPACK_IMPORTED_MODULE_1__["Vector"](x, y);
        let finalVector = clickVector.subtract(joystickVector);
        if (finalVector.length() > this.maxLength) {
            finalVector.normalize();
            finalVector.multiply(this.maxLength);
        }
        this.joystickPoistion.x = finalVector.x + this.canvas.width / 2;
        this.joystickPoistion.y = finalVector.y + this.canvas.width / 2;
        finalVector.divide(this.maxLength);
        this.joystick.update(finalVector.x, finalVector.y);
    }
    bindEvents() {
        const handleClickEvent = (event, state) => {
            if (state === false && this.joystick.draw === true)
                this.joystick.dispatch("end", this.joystick);
            if (state === false) {
                this.joystickPoistion.x = this.canvas.width / 2;
                this.joystickPoistion.y = this.canvas.height / 2;
                this.joystick.update(0, 0);
                this.joystick.draw = state;
                return;
            }
            this.joystick.draw = state;
            this.joystick.dispatch("start", this.joystick);
            const pos = _Utils__WEBPACK_IMPORTED_MODULE_0__["Utils"].getCursorPosition(event);
            this.calculate(pos.x, pos.y);
        };
        const handleMoveEvent = (event) => {
            if (!this.joystick.draw)
                return;
            const pos = _Utils__WEBPACK_IMPORTED_MODULE_0__["Utils"].getCursorPosition(event);
            this.calculate(pos.x, pos.y);
        };
        // for dekstop
        this.canvas.addEventListener("mousedown", (e) => handleClickEvent(e, true));
        document.addEventListener("mouseup", (e) => handleClickEvent(e, false));
        document.addEventListener("mousemove", (e) => handleMoveEvent(e));
        // for mobile
        this.canvas.addEventListener("touchstart", (e) => handleClickEvent(e, true));
        document.addEventListener("touchend", (e) => handleClickEvent(e, false));
        document.addEventListener("touchmove", (e) => handleMoveEvent(e));
    }
    drawBackground() {
        this.canvasContext.beginPath();
        this.canvasContext.lineWidth = 3 * this.joystick.options.scale;
        this.canvasContext.strokeStyle = this.joystick.options.color;
        this.canvasContext.arc(this.canvas.width / 2, this.canvas.height / 2, this.circleRadius.background, 0, 2 * Math.PI);
        this.canvasContext.stroke();
    }
    drawJoystick(x, y) {
        this.canvasContext.beginPath();
        this.canvasContext.arc(x, y, this.circleRadius.joystick, 0, 2 * Math.PI);
        this.canvasContext.fillStyle = this.joystick.options.color;
        this.canvasContext.fill();
        this.canvasContext.beginPath();
        this.canvasContext.arc(x, y, this.circleRadius.joystickStroke, 0, 2 * Math.PI);
        this.canvasContext.strokeStyle = this.joystick.options.strokeColor;
        this.canvasContext.stroke();
    }
    draw() {
        if (!this.canvasContext)
            return;
        this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.drawBackground();
        this.drawJoystick(this.joystickPoistion.x, this.joystickPoistion.y);
        // check whether joystick needs to move
        if (this.joystick.draw)
            window.requestAnimationFrame(() => this.draw());
    }
}


/***/ }),

/***/ "./src/Dispatcher.ts":
/*!***************************!*\
  !*** ./src/Dispatcher.ts ***!
  \***************************/
/*! exports provided: Dispatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dispatcher", function() { return Dispatcher; });
class DispatcherEvent {
    constructor(eventName) {
        this.eventName = eventName;
        this.callbacks = [];
    }
    registerCallback(callback) {
        this.callbacks.push(callback);
    }
    unregisterCallback(callback) {
        const index = this.callbacks.indexOf(callback);
        if (index > -1) {
            this.callbacks.splice(index, 1);
        }
    }
    fire(data) {
        const callbacks = this.callbacks.slice(0);
        callbacks.forEach((callback) => {
            callback(data);
        });
    }
}
class Dispatcher {
    constructor() {
        this.events = {};
    }
    dispatch(eventName, data) {
        const event = this.events[eventName];
        if (event) {
            event.fire(data);
        }
    }
    on(eventName, callback) {
        let event = this.events[eventName];
        if (!event) {
            event = new DispatcherEvent(eventName);
            this.events[eventName] = event;
        }
        event.registerCallback(callback);
    }
    off(eventName, callback) {
        const event = this.events[eventName];
        if (event && event.callbacks.indexOf(callback) > -1) {
            event.unregisterCallback(callback);
            if (event.callbacks.length === 0) {
                delete this.events[eventName];
            }
        }
    }
}


/***/ }),

/***/ "./src/Joystick.ts":
/*!*************************!*\
  !*** ./src/Joystick.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Joystick; });
/* harmony import */ var _CanvasHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanvasHandler */ "./src/CanvasHandler.ts");
/* harmony import */ var _Dispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dispatcher */ "./src/Dispatcher.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");
/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Vector */ "./src/Vector.ts");




class Joystick extends _Dispatcher__WEBPACK_IMPORTED_MODULE_1__["Dispatcher"] {
    constructor(domElement, options) {
        super();
        this.domElement = domElement;
        this.options = options;
        this._draw = false;
        this.domElement = domElement || document.querySelector("#joystick");
        if (!this.domElement)
            console.error("ERROR: Could not find #joystick HTMLElement.");
        else {
            this.options = options || {};
            // handling options
            this.options.scale = this.options.scale || 1;
            this.options.color = this.options.color || _Utils__WEBPACK_IMPORTED_MODULE_2__["Utils"].color;
            this.options.strokeColor = this.options.strokeColor || _Utils__WEBPACK_IMPORTED_MODULE_2__["Utils"].strokeColor;
            this.init();
        }
    }
    get draw() { return this._draw; }
    set draw(s) {
        if (!s && !this.draw)
            return;
        this._draw = s;
        this.canvasHander.draw();
    }
    init() {
        this.canvasHander = new _CanvasHandler__WEBPACK_IMPORTED_MODULE_0__["CanvasHandler"](this);
    }
    update(x, y) {
        this.dirVector = new _Vector__WEBPACK_IMPORTED_MODULE_3__["Vector"](x, y);
        this.dispatch("change", this);
    }
    // public functions for users
    directionVector() {
        return {
            x: this.dirVector.x,
            y: this.dirVector.y
        };
    }
    directionAngleRads() {
        if (this.dirVector.length() === 0)
            return false;
        else
            return this.dirVector.toAngles();
    }
    directionAngleDegs() {
        if (this.directionAngleRads())
            return this.directionAngleRads() * 180 / Math.PI;
        else
            return false;
    }
    direction() {
        if (this.directionAngleRads()) {
            const angle = Math.round(this.directionAngleDegs()) + 450;
            var val = Math.floor((angle / 22.5) + 0.5);
            var arr = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
            return arr[(val % 16)];
        }
        else
            return false;
    }
    displacementValue() {
        return this.dirVector.length();
    }
}


/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/*! exports provided: Utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Utils", function() { return Utils; });
class Utils {
    static uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    static getCursorPosition(event) {
        let x;
        let y;
        if (event instanceof MouseEvent) {
            x = event.pageX;
            y = event.pageY;
        }
        else if (event instanceof TouchEvent) {
            x = event.changedTouches[0].pageX;
            y = event.changedTouches[0].pageY;
        }
        return { x: x, y: y };
    }
}
Utils.width = 100;
Utils.height = 100;
Utils.color = "#FF0000";
Utils.strokeColor = "#000000";


/***/ }),

/***/ "./src/Vector.ts":
/*!***********************!*\
  !*** ./src/Vector.ts ***!
  \***********************/
/*! exports provided: Vector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector", function() { return Vector; });
class Vector {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.x = x || 0;
        this.y = y || 0;
    }
    negative() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    add(v) {
        if (v instanceof Vector) {
            this.x += v.x;
            this.y += v.y;
        }
        else {
            this.x += v;
            this.y += v;
        }
        return this;
    }
    subtract(v) {
        if (v instanceof Vector) {
            this.x -= v.x;
            this.y -= v.y;
        }
        else {
            this.x -= v;
            this.y -= v;
        }
        return this;
    }
    multiply(v) {
        if (v instanceof Vector) {
            this.x *= v.x;
            this.y *= v.y;
        }
        else {
            this.x *= v;
            this.y *= v;
        }
        return this;
    }
    divide(v) {
        if (v instanceof Vector) {
            if (v.x != 0)
                this.x /= v.x;
            if (v.y != 0)
                this.y /= v.y;
        }
        else {
            if (v != 0) {
                this.x /= v;
                this.y /= v;
            }
        }
        return this;
    }
    equals(v) {
        return this.x == v.x && this.y == v.y;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    cross(v) {
        return this.x * v.y - this.y * v.x;
    }
    length() {
        return Math.sqrt(this.dot(this));
    }
    normalize() {
        return this.divide(this.length());
    }
    min() {
        return Math.min(this.x, this.y);
    }
    max() {
        return Math.max(this.x, this.y);
    }
    toAngles() {
        return -Math.atan2(-this.y, this.x);
    }
    angleTo(a) {
        return Math.acos(this.dot(a) / (this.length() * a.length()));
    }
    toArray(n) {
        return [this.x, this.y].slice(0, n || 2);
    }
    clone() {
        return new Vector(this.x, this.y);
    }
    set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Joystick = __webpack_require__(/*! ./Joystick */ "./src/Joystick.ts").default;
module.exports = Joystick;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,